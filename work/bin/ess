#!/usr/bin/perl

use strict;
use warnings;

use XML::Simple;
use LWP::Simple;
use IO::All;
use Getopt::Long;

my $cachedcopy = 0;
my $feed;
my %options;

Getopt::Long::Configure('bundling');
GetOptions(\%options,
	'pretend|p',
	'retry|r',
	'fail|f',
	'help|h') or usage();

usage() if $options{help};

die "Make up your mind, do you want to retry or fail?\n" if 
	$options{retry} && $options{fail};

if (@ARGV == 1) {
    get_feed();
    my $show = shift;
    my @shows = select_show($show);
    if (@shows > 1) {
        print STDERR "Multiple shows found for criterion '$show'\n";
        exit 1;
    }
    my $link = $feed->{channel}{item}[$shows[0]]{link};
    $link =~ s/\/listen.pls$//;
	if ($options{pretend}) {
		print "mplayer -cache 512 '$link'\n";
	}
	else {
		exec "mplayer -cache 512 '$link'";
		die "couldn't fork mplayer: $!\n";
	}
}
elsif (@ARGV == 0) {
	if ($options{pretend}) {
		die "You must provide a stream to use --pretend.\n";
	}
    get_feed();
    for (0..@{$feed->{channel}{item}}-1) {
        show_title($_);
    }
	if ($cachedcopy) {
		print "*** This schedule was generated from a cached feed; it is not up-to-date\n";
	}
}
else {
    usage();
}

sub get_feed {
    return if $feed;
	my $xml;
	my $success = eval {
		print STDERR "Fetching RSS feed from ess.tv\n";
		$xml = get('http://ess.tv/ess.rss') or die "Fetch failed\n";
		$feed = XMLin($xml) or die "Parse failed\n";
		1;
	};
	if ($success) {
		$xml > io("$ENV{HOME}/.essrss.xml");
	}
	else {
		if ($options{retry}) {
			print STDERR "Failed.  Caching disabled; retrying\n";
			goto &get_feed;
		}
		elsif ($options{fail}) {
			die "Failed.\n";
		}
		elsif (-e "$ENV{HOME}/.essrss.xml") {
			print STDERR "Failed.  Using cached copy of feed.\n";
			$xml = io("$ENV{HOME}/.essrss.xml")->slurp;
			$feed = XMLin($xml) or die "Parse failed (absurd!)\n";
			$cachedcopy = 1;
		}
		else {
			print STDERR "Failed.  No cached copy found; retrying\n";
			goto &get_feed;
		}
	}
}

sub select_show {
    my ($crit) = @_;
    if ($crit =~ /^\d+$/) {
        return $crit-1;
    }
    else {
        my @matches;
        for my $i (0..@{$feed->{channel}{item}}-1) {
            if ($feed->{channel}{item}[$i]{title} =~ /$crit/i) {
                push @matches, $i;
            }
        }
        if (@matches == 0) {
            print STDERR "No match found for '$crit'\n";
            exit 1;
        }
        else {
            return @matches;
        }
    }
}

sub show_title {
    my ($num) = @_;
    printf "ESS %02d: %s\n", $num+1, $feed->{channel}{item}[$num]{title}, "\n";
}

sub usage {
    print <<EOU;
Usage: ess                   Print a schedule
       ess <number>          Watch that stream number
       ess <string>          Watch the show whose title contains that string
  Options:
       -p --pretend          Print the command that would be executed 
                                 instead of executing it
       -r --retry            Retry when unable to get RSS feed
       -f --fail             Exit when unable to get RSS feed
       -h --help             This help message
EOU
    exit;
}

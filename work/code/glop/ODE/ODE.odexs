/* This is almost an XS file.  Lines that begin and end with %% are 
 * expanded using odexs2xs.pl. 
 */

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "ppport.h"

#include <math.h>
#include "ode/ode.h"

#include "const-c.inc"

typedef double* dV;
typedef double* dQ;

typedef dContactGeom* ContactGeom;

typedef dBodyID  dBodyID_NEW;
typedef dJointID dJointID_NEW;
typedef dGeomID  dGeomID_NEW;
typedef dSpaceID dSpaceID_NEW;

#define COLLIDE_BUFSIZE 64
#define INFINITESIMAL 1.0e-10

static const char* _joint_find_type(dJointID joint)
{
    const char* type;
    switch (dJointGetType(joint)) {
    case dJointTypeBall: 
        type = "ODE::Joint::Ball";
        break;
    case dJointTypeHinge:
        type = "ODE::Joint::Hinge";
        break;
    case dJointTypeSlider:
        type = "ODE::Joint::Slider";
        break;
    case dJointTypeContact:
        type = "ODE::Joint::Contact";
        break;
    case dJointTypeUniversal:
        type = "ODE::Joint::Universal";
        break;
    case dJointTypeHinge2:
        type = "ODE::Joint::DoubleHinge";
        break;
    case dJointTypeFixed:
        type = "ODE::Joint::Fixed";
        break;
    case dJointTypeAMotor:
        type = "ODE::Joint::AngularMotor";
        break;
    case dJointTypePlane2D:
        type = "ODE::Joint::Plane2D";
        break;
    default:
        type = "ODE::Joint";
    }

    return type;    
}

static const char* _geom_find_type(dGeomID geom)
{
    const char* type;
    switch (dGeomGetClass(geom)) {
    case dSphereClass:
        type = "ODE::Geom::Sphere";
        break;
    case dBoxClass:
        type = "ODE::Geom::Box";
        break;
    case dCCylinderClass:
        type = "ODE::Geom::CappedCylinder";
        break;
    case dCylinderClass:
        type = "ODE::Geom::Cylinder";
        break;
    case dPlaneClass:
        type = "ODE::Geom::Plane";
        break;
    case dGeomTransformClass:
        type = "ODE::Geom::Transform";
        break;
    case dRayClass:
        type = "ODE::Geom::Ray";
        break;
    case dTriMeshClass:
        type = "ODE::Geom::TriMesh";
        break;
    case dSimpleSpaceClass:
        type = "ODE::Geom::Space::Simple";
        break;
    case dHashSpaceClass:
        type = "ODE::Geom::Space::Hash";
        break;
    case dQuadTreeSpaceClass:
        type = "ODE::Geom::Space::QuadTree";
        break;
    default:
        type = "ODE::Geom";
        break;
    }
    return type;
}

static SV* _get_body_sv(dBodyID body)
{
    return sv_bless(newRV_inc((SV*)dBodyGetData(body)), gv_stashpv("ODE::Body", 1));
}

static SV* _get_joint_sv(dJointID joint)
{
    return sv_bless(newRV_inc((SV*)dJointGetData(joint)), gv_stashpv(_joint_find_type(joint), 1));
}

static SV* _get_geom_sv(dGeomID geom)
{
    return sv_bless(newRV_inc((SV*)dGeomGetData(geom)), gv_stashpv(_geom_find_type(geom), 1));
}

static void _near_callback(void* data, dGeomID o1, dGeomID o2)
{
    SV* code = (SV*)data;
    
    dSP;

    ENTER;
    SAVETMPS;
    
    PUSHMARK(SP);
    EXTEND(SP, 2);
    
    PUSHs(_get_geom_sv(o1));
    PUSHs(_get_geom_sv(o2));
    
    PUTBACK;

    call_sv(code, G_VOID);

    FREETMPS;
    LEAVE;
}

static void _body_dec_refcounts(dBodyID body)
{
    int i;
    int joints = dBodyGetNumJoints(body);

    for (i = 0; i < joints; i++) {
        SV* sv = _get_joint_sv(dBodyGetJoint(body, i));
        if (SvROK(sv) && SvIV(SvRV(sv))) {
            SvREFCNT_dec(sv);
        }
    }
}

MODULE = ODE        PACKAGE = ODE

INCLUDE: const-xs.inc

PROTOTYPES: ENABLE

void _close_ode()
    CODE:
        dCloseODE();

MODULE = ODE        PACKAGE = ODE::World

dWorldID _make()
    CODE:
        RETVAL = dWorldCreate();
    OUTPUT:
        RETVAL

void _destroy(id)
        dWorldID id;
    CODE:
        dWorldDestroy(id);

%% dVAccessor name => gravity, type => dWorldID, get => dWorldGetGravity, set => dWorldSetGravity %%

double ERP(world, erp = NO_INIT)
        dWorldID world;
        double erp;
    CODE:
        if (items == 2) {
            dWorldSetERP(world, erp);
            RETVAL = erp;
        }
        else {
            RETVAL = dWorldGetERP(world);
        }
    OUTPUT:
        RETVAL

double CFM(world, cfm)
        dWorldID world;
        double cfm;
    CODE:
        if (items == 2) {
            dWorldSetCFM(world, cfm);
            RETVAL = cfm;
        }
        else {
            RETVAL = dWorldGetCFM(world);
        }
    OUTPUT:
        RETVAL

void step(world, step)
        dWorldID world;
        double step;
    CODE:
        dWorldStep(world, step);

void quickstep(world, step)
        dWorldID world;
        double step;
    CODE:
        dWorldQuickStep(world, step);

dBodyID_NEW new_body(world)
        dWorldID world;
    CODE:
        RETVAL = dBodyCreate(world);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Body

void destroy(bodysv)
        SV* bodysv;
    PREINIT:
        dBodyID body;
        HV* stash;
    CODE:
        body = SvROK(bodysv) ? (dBodyID)SvIV(SvRV(bodysv)) : NULL;
        _body_dec_refcounts(body);
        if (body) {
            dBodyDestroy(body);
        }
        stash = gv_stashpv("ODE::Null", 1);
        sv_bless(bodysv, stash);  /* Rebless into Null so that we don't get segfaults */

%% dVRefAccessor name => position, type => dBodyID, get => dBodyGetPosition, set => dBodySetPosition %%

dQ rotation(body, q = NO_INIT)
        dBodyID body;
        dQ q;
    CODE:
        if (items == 2) {
            dBodySetQuaternion(body, q);
            RETVAL = q;
        }
        else {
            RETVAL = (dQ)dBodyGetQuaternion(body);
        }
    OUTPUT:
        RETVAL

%% dVRefAccessor name => velocity, type => dBodyID, get => dBodyGetLinearVel, set => dBodySetLinearVel %%

%% dVRefAccessor name => angular_velocity, type => dBodyID, get => dBodyGetAngularVel, set => dBodySetAngularVel %%

dMass* mass(body, in = NO_INIT)
        dBodyID body;
        dMass* in;
    PREINIT:
        dMass mass;
    CODE:
        if (items == 2) {
            dBodySetMass(body, in);
            RETVAL = in;
        }
        else {
            dBodyGetMass(body, &mass);
            RETVAL = &mass;
        }
    OUTPUT:
        RETVAL

void add_force(body, force, at = NO_INIT)
        dBodyID body;
        dV force;
        dV at;
    CODE:
        if (items == 3) {
            dBodyAddForceAtPos(body, force[0], force[1], force[2],
                                     at[0],    at[1],    at[2]);
        }
        else {
            dBodyAddForce(body, force[0], force[1], force[2]);
        }

void add_torque(body, torque)
        dBodyID body;
        dV torque;
    CODE:
        dBodyAddTorque(body, torque[0], torque[1], torque[2]);

# TODO: relative variants

%% dVRefAccessor name => force_accumulator, type => dBodyID, get => dBodyGetForce, set => dBodySetForce %%

%% dVRefAccessor name => torque_accumulator, type => dBodyID, get => dBodyGetTorque, set => dBodySetTorque %%

# TODO: relative conversion routines

int enabled(body, in = NO_INIT)
        dBodyID body;
        int in;
    CODE:
        if (items == 2) {
            if (in)
                dBodyEnable(body);
            else
                dBodyDisable(body);
            RETVAL = in;
        }
        else {
            RETVAL = dBodyIsEnabled(body);
        }
    OUTPUT:
        RETVAL
            
int finite_rotation_mode(body, in = NO_INIT)
        dBodyID body;
        int in;
    CODE:
        if (items == 2) {
            dBodySetFiniteRotationMode(body, RETVAL = !!in);
        }
        else {
            RETVAL = dBodyGetFiniteRotationMode(body);
        }
    OUTPUT:
        RETVAL

void joints(body)
        dBodyID body;
    PREINIT:
        int njoints, i;
    PPCODE:
        njoints = dBodyGetNumJoints(body);
        EXTEND(SP, njoints);
        for (i = 0; i < njoints; i++) {
            PUSHs(_get_joint_sv(dBodyGetJoint(body, i)));
        }

int gravity_mode(body, in = NO_INIT)
        dBodyID body;
        int in;
    CODE:
        if (items == 2) {
            dBodySetGravityMode(body, in);
            RETVAL = !!in;
        }
        else {
            RETVAL = dBodyGetGravityMode(body);
        }
    OUTPUT:
        RETVAL

MODULE = ODE          PACKAGE = ODE::JointGroup

dJointGroupID _make()
    CODE:
        RETVAL = dJointGroupCreate(0);
    OUTPUT:
        RETVAL

void empty(group)
        dJointGroupID group;
    CODE:
        dJointGroupEmpty(group);

void _destroy(group)
        dJointGroupID group;
    CODE:
        dJointGroupDestroy(group);

MODULE = ODE        PACKAGE = ODE::Joint

void destroy(jointsv)
        SV* jointsv;
    PREINIT:
        dJointID joint;
        HV* stash;
    CODE:
        joint = SvROK(jointsv) ? (dJointID)SvIV(SvRV(jointsv)) : NULL;

        if (dJointGetBody(joint, 0)) {
            SvREFCNT_dec(jointsv);
        }
        if (dJointGetBody(joint, 1)) {
            SvREFCNT_dec(jointsv);
        }
        
        dJointDestroy(joint);
        stash = gv_stashpv("ODE::Null", 1);
        sv_bless(jointsv, stash);

void _destroy(joint)
        dJointID joint;
    CODE:
        dJointDestroy(joint);
        
void attach(jointsv, bodya, bodyb)
        SV* jointsv;
        dBodyID bodya;
        dBodyID bodyb;
    PREINIT:
        dJointID joint;
    CODE:
        joint = SvROK(jointsv) ? (dJointID)SvIV(SvRV(jointsv)) : NULL;
        dJointAttach(joint, bodya, bodyb);
        if (bodya) {
            SvREFCNT_inc(jointsv);
        }
        if (bodyb) {
            SvREFCNT_inc(jointsv);
        }

# TODO: Feedback

# TODO: AreConnected


MODULE = ODE        PACKAGE = ODE::Joint::Ball

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateBall(world, group);
    OUTPUT:
        RETVAL

%% dVAccessor name => anchor, type => dJointID, get => dJointGetBallAnchor, set => dJointSetBallAnchor %%


MODULE = ODE        PACKAGE = ODE::Joint::Hinge

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateHinge(world, group);
    OUTPUT:
        RETVAL

%% dVAccessor name => anchor, type => dJointID, get => dJointGetHingeAnchor, set => dJointSetHingeAnchor %%

%% dVAccessor name => axis, type => dJointID, get => dJointGetHingeAxis, set => dJointSetHingeAxis %%

double angle(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetHingeAngle(joint);
    OUTPUT:
        RETVAL

double angle_rate(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetHingeAngleRate(joint);
    OUTPUT:
        RETVAL

double _param(joint, parameter, value = NO_INIT)
        dJointID joint;
        int parameter;
        double value;
    CODE:
        if (items == 3) {
            dJointSetHingeParam(joint, parameter, value);
            RETVAL = value;
        }
        else {
            RETVAL = dJointGetHingeParam(joint, parameter);
        }
    OUTPUT:
        RETVAL
        
MODULE = ODE        PACKAGE = ODE::Joint::Slider

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateSlider(world, group);
    OUTPUT:
        RETVAL

%% dVAccessor name => axis, type => dJointID, get => dJointGetSliderAxis, set => dJointSetSliderAxis %%

double extension(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetSliderPosition(joint);
    OUTPUT:
        RETVAL

double extension_rate(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetSliderPositionRate(joint);
    OUTPUT:
        RETVAL

double _param(joint, parameter, value = NO_INIT)
        dJointID joint;
        int parameter;
        double value;
    CODE:
        if (items == 3) {
            dJointSetSliderParam(joint, parameter, value);
            RETVAL = value;
        }
        else {
            RETVAL = dJointGetSliderParam(joint, parameter);
        }
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Joint::Contact

dJointID_NEW _make(world, group = NULL, params)
        dWorldID world;
        dJointGroupID group;
        HV* params;
    PREINIT:
        dContact contact = {};
    CODE:
        /* XXX: Error checking in all this code, ugh */
        if (hv_exists(params, "mode", 4))
            contact.surface.mode       = SvIV(*hv_fetch(params, "mode", 4, 0));
        if (hv_exists(params, "mu", 2))
            contact.surface.mu         = SvNV(*hv_fetch(params, "mu", 2, 0));
        if (hv_exists(params, "mu2", 3))
            contact.surface.mu2        = SvNV(*hv_fetch(params, "mu2", 3, 0));
        if (hv_exists(params, "bounce", 6))
            contact.surface.bounce     = SvNV(*hv_fetch(params, "bounce", 6, 0));
        if (hv_exists(params, "bounce_vel", 10))
            contact.surface.bounce_vel = SvNV(*hv_fetch(params, "bounce_vel", 10, 0));
        if (hv_exists(params, "soft_erp", 8))
            contact.surface.soft_erp   = SvNV(*hv_fetch(params, "soft_erp", 8, 0));
        if (hv_exists(params, "soft_cfm", 8))
            contact.surface.soft_cfm   = SvNV(*hv_fetch(params, "soft_cfm", 8, 0));
        if (hv_exists(params, "motion1", 7))
            contact.surface.motion1    = SvNV(*hv_fetch(params, "motion1", 7, 0));
        if (hv_exists(params, "motion2", 7))
            contact.surface.motion2    = SvNV(*hv_fetch(params, "motion2", 7, 0));
        if (hv_exists(params, "slip1", 5))
            contact.surface.slip1      = SvNV(*hv_fetch(params, "slip1", 5, 0));
        if (hv_exists(params, "slip2", 5))
            contact.surface.slip2      = SvNV(*hv_fetch(params, "slip2", 5, 0));
        if (hv_exists(params, "fdir1", 5)) {
            dV v = (dV) SvPV_nolen(SvRV(*hv_fetch(params, "fdir1", 5, 0)));
            contact.fdir1[0] = v[0];
            contact.fdir1[1] = v[1];
            contact.fdir1[2] = v[2];
        }
        if (hv_exists(params, "pos", 3)) {
            dV v = (dV)SvPV_nolen(SvRV(*hv_fetch(params, "pos", 3, 0)));
            contact.geom.pos[0] = v[0];
            contact.geom.pos[1] = v[1];
            contact.geom.pos[2] = v[2];
        }
        if (hv_exists(params, "normal", 6)) {
            dV v = (dV)SvPV_nolen(SvRV(*hv_fetch(params, "normal", 6, 0)));
            contact.geom.normal[0] = v[0];
            contact.geom.normal[1] = v[1];
            contact.geom.normal[2] = v[2];
        }
        if (hv_exists(params, "depth", 5)) {
            contact.geom.depth = SvNV(*hv_fetch(params, "depth", 5, 0));
        }

        RETVAL = dJointCreateContact(world, group, &contact);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Joint::Universal

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateUniversal(world, group);
    OUTPUT:
        RETVAL

%% dVAccessor name => anchor, type => dJointID, get => dJointGetUniversalAnchor, set => dJointSetUniversalAnchor %%

%% dVAccessor name => axis1, type => dJointID, get => dJointGetUniversalAxis1, set => dJointSetUniversalAxis1 %%

%% dVAccessor name => axis2, type => dJointID, get => dJointGetUniversalAxis2, set => dJointSetUniversalAxis2 %%

double _param(joint, parameter, value = NO_INIT)
        dJointID joint;
        int parameter;
        double value;
    CODE:
        if (items == 3) {
            dJointSetUniversalParam(joint, parameter, value);
            RETVAL = value;
        }
        else {
            RETVAL = dJointGetUniversalParam(joint, parameter);
        }
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Joint::DoubleHinge

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateHinge2(world, group);
    OUTPUT:
        RETVAL

%% dVAccessor name => anchor, type => dJointID, get => dJointGetHinge2Anchor, set => dJointSetHinge2Anchor %%

%% dVAccessor name => axis1, type => dJointID, get => dJointGetHinge2Axis1, set => dJointSetHinge2Axis1 %%

%% dVAccessor name => axis2, type => dJointID, get => dJointGetHinge2Axis2, set => dJointSetHinge2Axis2 %%

double angle1(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetHinge2Angle1(joint);
    OUTPUT:
        RETVAL

# XXX: Why doesn't ODE have a dJointGetHinge2Angle2 function

double angle1_rate(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetHinge2Angle1Rate(joint);
    OUTPUT:
        RETVAL

double angle2_rate(joint)
        dJointID joint;
    CODE:
        RETVAL = dJointGetHinge2Angle2Rate(joint);
    OUTPUT:
        RETVAL

double _param(joint, parameter, value = NO_INIT)
        dJointID joint;
        int parameter;
        double value;
    CODE:
        if (items == 3) {
            dJointSetHinge2Param(joint, parameter, value);
            RETVAL = value;
        }
        else {
            RETVAL = dJointGetHinge2Param(joint, parameter);
        }
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Joint::Fixed

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateFixed(world, group);
    OUTPUT:
        RETVAL

void reset(joint)
        dJointID joint;
    CODE:
        dJointSetFixed(joint);

MODULE = ODE        PACKAGE = ODE::Joint::AngularMotor

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreateAMotor(world, group);
    OUTPUT:
        RETVAL

int num_axes(joint, num = NO_INIT)
        dJointID joint;
        int num;
    CODE:
        if (items == 2) {
            dJointSetAMotorNumAxes(joint, num);
            RETVAL = num;
        }
        else {
            RETVAL = dJointGetAMotorNumAxes(joint);
        }
    OUTPUT:
        RETVAL

dV axis(joint, num, rel = NO_INIT, axis = NO_INIT)
        dJointID joint;
        int num;
        int rel;
        dV axis;
    PREINIT:
        dVector3 ret;
    CODE:
        if (items == 3) {
            croak("ODE::Joint::AngularMotor::axis: Usage: $joint->axis($num, [ $rel, $axis ])");
        }
        else if (items == 4) {
            dJointSetAMotorAxis(joint, num, rel, axis[0], axis[1], axis[2]);
            RETVAL = axis;
        }
        else if (items == 2) {
            dJointGetAMotorAxis(joint, num, ret);
            RETVAL = ret;
        }
    OUTPUT: 
        RETVAL

double angle(joint, num, angle = NO_INIT)
        dJointID joint;
        int num;
        double angle;
    CODE:
        if (items == 2) {
            RETVAL = dJointGetAMotorAngle(joint, num);
        }
        else {
            dJointSetAMotorAngle(joint, num, angle);
            RETVAL = angle;
        }
    OUTPUT:
        RETVAL

double angle_rate(joint, num)
        dJointID joint;
        int num;
    CODE:
        RETVAL = dJointGetAMotorAngleRate(joint, num);
    OUTPUT:
        RETVAL

double _param(joint, parameter, value = NO_INIT)
        dJointID joint;
        int parameter;
        double value;
    CODE:
        if (items == 3) {
            dJointSetAMotorParam(joint, parameter, value);
            RETVAL = value;
        }
        else {
            RETVAL = dJointGetAMotorParam(joint, parameter);
        }
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Joint::Plane2D

dJointID_NEW _make(world, group = NULL)
        dWorldID world;
        dJointGroupID group;
    CODE:
        RETVAL = dJointCreatePlane2D(world, group);
    OUTPUT:
        RETVAL

double _param(joint, parameter, value = NO_INIT)
        dJointID joint;
        int parameter;
        double value;
    CODE:
        RETVAL = 0;
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::ContactGeom

dV pos(geom)
        ContactGeom geom;
    CODE:
        RETVAL = geom->pos;
    OUTPUT:
        RETVAL

dV normal(geom)
        ContactGeom geom;
    CODE:
        RETVAL = geom->normal;
    OUTPUT:
        RETVAL

double depth(geom)
        ContactGeom geom;
    CODE:
        RETVAL = geom->depth;
    OUTPUT:
        RETVAL

dGeomID g1(geom)
        ContactGeom geom;
    CODE:
        RETVAL = geom->g1;
    OUTPUT:
        RETVAL

dGeomID g2(geom)
        ContactGeom geom;
    CODE:
        RETVAL = geom->g2;
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Geom

void destroy(geomsv)
        SV* geomsv;
    PREINIT:
        dGeomID geom;;
        HV* stash;
    CODE:
        geom = SvROK(geomsv) ? (dGeomID)SvIV(SvRV(geomsv)) : NULL;
        if (geom) {
            dGeomDestroy(geom);
        }
        stash = gv_stashpv("ODE::Null", 1);
        sv_bless(geomsv, stash);  /* Rebless into Null so that we don't get segfaults */

dBodyID body(geom, ibody = NO_INIT)
        dGeomID geom;
        dBodyID ibody;
    CODE:
        if (items == 2) {
            dGeomSetBody(geom, ibody);
            RETVAL = ibody;
        }
        else {
            RETVAL = dGeomGetBody(geom);
        }
    OUTPUT:
        RETVAL

%% dVRefAccessor name => position, type => dGeomID, get => dGeomGetPosition, set => dGeomSetPosition %%

dQ rotation(geom, rot = NO_INIT)
        dGeomID geom;
        dQ rot;
    PREINIT:
        dQuaternion retq;
    CODE:
        if (items == 2) {
            dGeomSetQuaternion(geom, rot);
            RETVAL = rot;
        }
        else {
            dGeomGetQuaternion(geom, retq);
            RETVAL = retq;
        }
    OUTPUT:
        RETVAL

# XXX: Should this not return two dV's

void aabb(geom)
        dGeomID geom;
    PREINIT:
        double v[6];
    PPCODE:
        dGeomGetAABB(geom, v);
        EXTEND(SP, 6);
        PUSHs(sv_2mortal(newSVnv(v[0])));
        PUSHs(sv_2mortal(newSVnv(v[1])));
        PUSHs(sv_2mortal(newSVnv(v[2])));
        PUSHs(sv_2mortal(newSVnv(v[3])));
        PUSHs(sv_2mortal(newSVnv(v[4])));
        PUSHs(sv_2mortal(newSVnv(v[5])));

int is_space(geom)
        dGeomID geom;
    CODE:
        RETVAL = dGeomIsSpace(geom);
    OUTPUT:
        RETVAL

dSpaceID space(geom)
        dGeomID geom;
    CODE:
        RETVAL = dGeomGetSpace(geom);
    OUTPUT:
        RETVAL

unsigned long category_bits(geom, bits = NO_INIT)
        dGeomID geom;
        unsigned long bits;
    CODE:
        if (items == 2) {
            dGeomSetCategoryBits(geom, bits);
            RETVAL = bits;
        }
        else {
            RETVAL = dGeomGetCategoryBits(geom);
        }
    OUTPUT:
        RETVAL

unsigned long collide_bits(geom, bits = NO_INIT)
        dGeomID geom;
        unsigned long bits;
    CODE:
        if (items == 2) {
            dGeomSetCollideBits(geom, bits);
            RETVAL = bits;
        }
        else {
            RETVAL = dGeomGetCollideBits(geom);
        }
    OUTPUT:
        RETVAL

void enable(geom)
        dGeomID geom;
    CODE:
        dGeomEnable(geom);

void disable(geom)
        dGeomID geom;
    CODE:
        dGeomDisable(geom);

int enabled(geom)
        dGeomID geom;
    CODE:
        RETVAL = dGeomIsEnabled(geom);
    OUTPUT:
        RETVAL

void collide(geom, other)
        dGeomID geom;
        dGeomID other;
    PREINIT:
        int ncontacts, i;
        dContactGeom geoms[COLLIDE_BUFSIZE];
    PPCODE:
        ncontacts = dCollide(geom, other, COLLIDE_BUFSIZE, geoms, sizeof(dContactGeom));
        EXTEND(SP, ncontacts);
        for (i = 0; i < ncontacts; i++) {
            SV* ret = sv_newmortal();
            sv_setref_pvn(ret, "ODE::ContactGeom", (void*)&geoms[i], sizeof(dContactGeom));
            PUSHs(ret);
        }

void multi_collide(geom, other, callback)
        dGeomID geom;
        dGeomID other;
        SV* callback;
    CODE:
        dSpaceCollide2(geom, other, (void*)callback, &_near_callback);

MODULE = ODE        PACKAGE = ODE::Geom::Space

void _destroy(space)
        dSpaceID space;
    CODE:
        dSpaceDestroy(space);

void space_collide(space, callback)
        dSpaceID space;
        SV* callback;
    CODE:
        dSpaceCollide(space, (void*)callback, &_near_callback);

void add(space, geom)
        dSpaceID space;
        dGeomID geom;
    CODE:
        dSpaceAdd(space, geom);

void remove(space, geom)
        dSpaceID space;
        dGeomID geom;
    CODE:
        dSpaceRemove(space, geom);

int query(space, geom)
        dSpaceID space;
        dGeomID geom;
    CODE:
        RETVAL = dSpaceQuery(space, geom);
    OUTPUT:
        RETVAL

void geoms(space)
        dSpaceID space;
    PREINIT:
        int num_geoms, i;
    PPCODE:
        num_geoms = dSpaceGetNumGeoms(space);
        EXTEND(sp, num_geoms);
        for (i = 0; i < num_geoms; i++) {
            PUSHs(_get_geom_sv(dSpaceGetGeom(space, i)));
        }

MODULE = ODE        PACKAGE = ODE::Geom::Space::Simple

dSpaceID_NEW _make(parent = NULL)
        dSpaceID parent;
    CODE:
        RETVAL = dSimpleSpaceCreate(parent);
        dSpaceSetCleanup(RETVAL, 0);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Geom::Space::Hash

dSpaceID_NEW _make(parent = NULL)
        dSpaceID parent;
    CODE:
        RETVAL = dHashSpaceCreate(parent);
        dSpaceSetCleanup(RETVAL, 0);
    OUTPUT:
        RETVAL

void levels(space, int min = NO_INIT, int max = NO_INIT)
        dSpaceID space;
    PPCODE:
        if (items == 3) {
            dHashSpaceSetLevels(space, min, max);
        }
        else if (items == 1) {
            dHashSpaceGetLevels(space, &min, &max);
        }
        else {
            croak("levels: Usage: levels(space, [min, max])");
        }
        EXTEND(SP, 2);
        PUSHs(sv_2mortal(newSViv(min)));
        PUSHs(sv_2mortal(newSViv(max)));

MODULE = ODE        PACKAGE = ODE::Geom::Space::QuadTree

dSpaceID_NEW _make(parent, center, ext, depth)
        dSpaceID parent;
        dV center;
        dV ext;
        int depth;
    PREINIT:
        dSpaceID space;
    CODE:
        RETVAL = dQuadTreeSpaceCreate(parent, center, ext, depth);
        dSpaceSetCleanup(RETVAL, 0);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Geom::Sphere

dGeomID_NEW _make(parent, radius)
        dSpaceID parent;
        double radius;
    CODE:
        RETVAL = dCreateSphere(parent, radius);
    OUTPUT:
        RETVAL

double radius(geom, newrad = NO_INIT)
        dGeomID geom;
        double newrad;
    CODE:
        if (items == 2) {
            dGeomSphereSetRadius(geom, newrad);
            RETVAL = newrad;
        }
        else {
            RETVAL = dGeomSphereGetRadius(geom);
        }
    OUTPUT:
        RETVAL

double depth(geom, point)
        dGeomID geom;
        dV point;
    CODE:
        RETVAL = dGeomSpherePointDepth(geom, point[0], point[1], point[2]);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Geom::Box

dGeomID_NEW _make(parent, dims)
        dSpaceID parent;
        dV dims;
    CODE:
        RETVAL = dCreateBox(parent, dims[0], dims[1], dims[2]);
    OUTPUT:
        RETVAL

%% dVAccessor name => sides, type => dGeomID, get => dGeomBoxGetLengths, set => dGeomBoxSetLengths %%

double depth(geom, point)
        dGeomID geom;
        dV point;
    CODE:
        RETVAL = dGeomBoxPointDepth(geom, point[0], point[1], point[2]);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Geom::Plane

dGeomID_NEW _make(parent, normal, param)
        dSpaceID parent;
        dV normal;
        double param;
    CODE:
        RETVAL = dCreatePlane(parent, normal[0], normal[1], normal[2], param);
    OUTPUT:
        RETVAL

void normal_param(geom, normal = NO_INIT, param = NO_INIT)
        dGeomID geom;
        dV normal;
        double param;
    PPCODE:
        EXTEND(SP, 2);
        if (items == 3) {
            SV* ret;
            dGeomPlaneSetParams(geom, normal[0], normal[1], normal[2], param);
            ret = sv_newmortal();
            sv_setref_pvn(ret, "ODE::Vector", (void*)normal, sizeof(dVector3));
            PUSHs(ret);
            PUSHs(sv_2mortal(newSVnv(param)));
        }
        else if (items == 1) {
            dVector4 grab;
            SV* ret;
            dGeomPlaneGetParams(geom, grab);
            ret = sv_newmortal();
            sv_setref_pvn(ret, "ODE::Vector", (void*)normal, sizeof(dVector3));
            PUSHs(ret);
            PUSHs(sv_2mortal(newSVnv(grab[3])));
        }
        else {
            croak("normal_param: Usage: normal_param([normal, param])");
        }

double depth(geom, point)
        dGeomID geom;
        dV point;
    CODE:
        RETVAL = dGeomPlanePointDepth(geom, point[0], point[1], point[2]);
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Geom::CappedCylinder

dGeomID_NEW _make(parent, radius, length)
        dSpaceID parent;
        double radius;
        double length;
    CODE:
        RETVAL = dCreateCCylinder(parent, radius, length);
    OUTPUT:
        RETVAL

void params(geom, radius = NO_INIT, length = NO_INIT)
        dGeomID geom;
        double radius;
        double length;
    PPCODE:
        if (items == 3) {
            dGeomCCylinderSetParams(geom, radius, length);
        }
        else if (items == 1) {
            dGeomCCylinderGetParams(geom, &radius, &length);
        }
        else {
            croak("params: Usage: params([radius, length])");
        }

        EXTEND(SP, 2);
        PUSHs(sv_2mortal(newSVnv(radius)));
        PUSHs(sv_2mortal(newSVnv(length)));

double depth(geom, point)
        dGeomID geom;
        dV point;
    CODE:
        RETVAL = dGeomCCylinderPointDepth(geom, point[0], point[1], point[2]);
    OUTPUT:
        RETVAL

# TODO: Cylinder (did I just forget about it?)

MODULE = ODE        PACKAGE = ODE::Geom::Ray

dGeomID_NEW _make(parent, length)
        dSpaceID parent;
        double length;
    CODE:
        RETVAL = dCreateRay(parent, length);
    OUTPUT:
        RETVAL

double length(geom, length = NO_INIT)
        dGeomID geom;
        double length;
    CODE:
        if (items == 2) {
            dGeomRaySetLength(geom, length);
            RETVAL = length;
        }
        else {
            RETVAL = dGeomRayGetLength(geom);
        }
    OUTPUT:
        RETVAL

void orient(geom, pos, dir)
        dGeomID geom;
        dV pos;
        dV dir;
    CODE:
        dGeomRaySet(geom, pos[0], pos[1], pos[2], dir[0], dir[1], dir[2]);

void orientation(geom)
        dGeomID geom;
    PREINIT:
        dVector3 pos;
        dVector3 dir;
        SV* ret;
    PPCODE:
        EXTEND(SP, 2);
        dGeomRayGet(geom, pos, dir);
       
        ret = sv_newmortal();
        sv_setref_pvn(ret, "ODE::Vector", (void*)pos, sizeof(dVector3));
        PUSHs(ret);
        
        ret = sv_newmortal();
        sv_setref_pvn(ret, "ODE::Vector", (void*)dir, sizeof(dVector3));
        PUSHs(ret);

# TODO: TriMesh class

MODULE = ODE        PACKAGE = ODE::Geom::Transform

dGeomID_NEW _make(parent)
        dSpaceID parent;
    CODE:
        RETVAL = dCreateGeomTransform(parent);
        dGeomTransformSetInfo(RETVAL, 1);  /* opaque */
    OUTPUT:
        RETVAL

dGeomID geom(geom, in = NO_INIT)
        dGeomID geom;
        dGeomID in;
    CODE:
        if (items == 2) {
            dGeomTransformSetGeom(geom, in);
            RETVAL = in;
        }
        else {
            RETVAL = dGeomTransformGetGeom(geom);
        }
    OUTPUT:
        RETVAL

MODULE = ODE		PACKAGE = ODE::Vector

dV _make(x, y, z)
        double x;
        double y;
        double z;
    PREINIT:
        dVector3 v;
    CODE:
        v[0] = x;
        v[1] = y;
        v[2] = z;
        RETVAL = v;
    OUTPUT:
        RETVAL

dV clone(v)
        dV v;
    CODE:
        RETVAL = v;
    OUTPUT:
        RETVAL

void list(v)
        dV v;
    PPCODE:
        EXTEND(SP, 3);
        PUSHs(sv_2mortal(newSVnv(v[0])));
        PUSHs(sv_2mortal(newSVnv(v[1])));
        PUSHs(sv_2mortal(newSVnv(v[2])));

double x(v)
        dV v;
    CODE:
        RETVAL = v[0];
    OUTPUT:
        RETVAL

double y(v)
        dV v;
    CODE:
        RETVAL = v[1];
    OUTPUT:
        RETVAL

double z(v)
        dV v;
    CODE:
        RETVAL = v[2];
    OUTPUT:
        RETVAL

dV sum(u, v, dummy = NO_INIT)
        dV u;
        dV v;
        int dummy;
    PREINIT:
        dVector3 ret;
    CODE:
        ret[0] = u[0] + v[0];
        ret[1] = u[1] + v[1];
        ret[2] = u[2] + v[2];
        RETVAL = ret;
    OUTPUT:
        RETVAL

dV neg(u)
        dV u;
    PREINIT:
        dVector3 ret;
    CODE:
        ret[0] = -u[0];
        ret[1] = -u[1];
        ret[2] = -u[2];
        RETVAL = ret;
    OUTPUT:
        RETVAL        

dV scale(u, n, dummy = NO_INIT)
        dV u;
        double n;
        int dummy;
    PREINIT:
        dVector3 ret;
    CODE:
        ret[0] = u[0] * n;
        ret[1] = u[1] * n;
        ret[2] = u[2] * n;
        RETVAL = ret;
    OUTPUT:
        RETVAL

double dot(u, v, dummy = NO_INIT)
        dV u;
        dV v;
        int dummy;
    CODE:
        RETVAL = u[0] * v[0] + u[1] * v[1] + u[2] * v[2];
    OUTPUT:
        RETVAL

dV cross(u, v, dummy = NO_INIT)
        dV u;
        dV v;
        int dummy;
    PREINIT:
        dVector3 ret;
    CODE:
        ret[0] = u[1] * v[2] - u[2] * v[1];
        ret[1] = u[2] * v[0] - u[0] * v[2];
        ret[2] = u[0] * v[1] - u[1] * v[0];
        RETVAL = ret;
    OUTPUT:
        RETVAL

double norm(u)
        dV u;
    CODE:
        RETVAL = sqrt(u[0]*u[0] + u[1]*u[1] + u[2]*u[2]);
    OUTPUT:
        RETVAL

dV unit(u)
        dV u;
    PREINIT:
        double norm;
        dVector3 v;
    CODE:
        norm = sqrt(u[0]*u[0] + u[1]*u[1] + u[2]*u[2]);
        if (norm > INFINITESIMAL) {
            v[0] = u[0] / norm;
            v[1] = u[1] / norm;
            v[2] = u[2] / norm;
        }
        else {
            v[0] = v[1] = v[2] = 0;
        }
        RETVAL = v;
    OUTPUT:
        RETVAL

int equals(u, v, dummy = NO_INIT)
        dV u;
        dV v;
        int dummy;
    CODE:
        RETVAL = fabs(u[0] - v[0]) < INFINITESIMAL
              && fabs(u[1] - v[1]) < INFINITESIMAL
              && fabs(u[2] - v[2]) < INFINITESIMAL;
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Quaternion

dQ _make_identity()
    PREINIT:
        dQuaternion q;
    CODE:
        dQSetIdentity(q);
        RETVAL = q;
    OUTPUT:
        RETVAL
        
dQ _make_angle_axis(angle, axis)
        double angle;
        dV axis;
    PREINIT:
        dQuaternion q;
    CODE:
        dQFromAxisAndAngle(q, axis[0], axis[1], axis[2], angle);
        RETVAL = q;
    OUTPUT:
        RETVAL

dQ _make_direct(a, b, c, d)
        double a;
        double b;
        double c;
        double d;
    PREINIT:
        dQuaternion q;
        double len;
    CODE:
        len = sqrt(a*a + b*b + c*c + d*d);
        q[0] = a / len;
        q[1] = b / len;
        q[2] = c / len;
        q[3] = d / len;
        RETVAL = q;
    OUTPUT:
        RETVAL

void list(v)
        dQ v;
    PPCODE:
        EXTEND(SP, 4);
        PUSHs(sv_2mortal(newSVnv(v[0])));
        PUSHs(sv_2mortal(newSVnv(v[1])));
        PUSHs(sv_2mortal(newSVnv(v[2])));
        PUSHs(sv_2mortal(newSVnv(v[3])));

dQ clone(q)
        dQ q;
    CODE:
        RETVAL = q;
    OUTPUT:
        RETVAL

double angle(q)
        dQ q;
    CODE:
        RETVAL = 2 * acos(q[0]);
    OUTPUT:
        RETVAL

dV axis(q)
        dQ q;
    PREINIT:
        dVector3 v;
        double sina;
    CODE:
        sina = sqrt(1.0 - q[0] * q[0]);
        if (fabs(sina) < 0.0005) { /* Don't divide by almost-0 */
            sina = 1;
        }
        v[0] = q[1] / sina;
        v[1] = q[2] / sina;
        v[2] = q[3] / sina;
        RETVAL = v;
    OUTPUT:
        RETVAL

dQ inverse(q)
        dQ q;
    PREINIT:
        dQuaternion r;
    CODE:
        r[0] = q[0];
        r[1] = -q[1];
        r[2] = -q[2];
        r[3] = -q[3];
        RETVAL = r;
    OUTPUT:
        RETVAL

dQ prod(q, r, swap = 0)
        dQ q;
        dQ r;
        int swap;
    PREINIT:
        dQuaternion s;
    CODE:
        if (swap)
            dQMultiply0(s, r, q);
        else
            dQMultiply0(s, q, r);
        RETVAL = s;
    OUTPUT:
        RETVAL

MODULE = ODE        PACKAGE = ODE::Mass

dMass* _make()
    PREINIT:
        dMass m;
    CODE:
        dMassSetZero(&m);
        RETVAL = &m;
    OUTPUT:
        RETVAL

double mass(m, in = NO_INIT)
        dMass* m;
        double in;
    CODE:
        if (items == 2) {
            m->mass = in;
        }
        RETVAL = m->mass;
    OUTPUT:
        RETVAL

dV center_of_gravity(m, in = NO_INIT)
        dMass* m;
        dV in;
    CODE:
        if (items == 2) {
            memcpy(m->c, in, sizeof(dVector3));
        }
        RETVAL = m->c;
    OUTPUT:
        RETVAL

# TODO: moment (awaiting dMatrix)

# vim: ft=xs :

#!/usr/bin/perl

# cooper: An implementation of Cooper Young
# http://en.wikipedia.org/CooperYoung
# by Luke Palmer

use strict;
use Tk;

my $height = shift || 8;
my $width = shift || $height;
my @grid;
my @pgrid;
my %score;

my $player = 'red';

my $mw = MainWindow->new;

for (1..$width) {
    $mw->Label(-text => chr(ord('A') + $_-1))->grid(-row => 0, -column => $_);
}

for (1..$height) {
    $mw->Label(-text => $_)->grid(-row => $_, -column => 0);
}

for my $row (1..$height) {
    for my $col (1..$width) {
        $grid[$row][$col] = $mw->Button(-command => sub { 
                select_square($row, $col);
            })->grid(-row => $row, -column => $col);
		$pgrid[$row][$col] = 'empty';
    }
}

sub subline {
	my ($x, $y, $xp, $yp) = @_;
	my @ret;
	while ($x != $xp || $y != $yp) {
		push @ret, [$x, $y];
		$x += $xp == $x ? 0 : ($xp - $x) / abs($xp - $x);
		$y += $yp == $y ? 0 : ($yp - $y) / abs($yp - $y);
	}
	return \@ret;
}

sub gridline {
	my ($x, $y, $length) = @_;
	my @ret;
	my $lp = $length - 1;
	my $xleft = $x - $lp >= 0;
	my $xright = $x + $lp < $height;
	my $ybottom = $y - $lp >= 0;
	my $ytop     = $y + $lp < $width;
	print "xleft = $xleft ; xright = $xright ; ybottom = $ybottom ; ytop = $ytop\n";
	push @ret, subline($x, $y, $x + $length, $y)           if $xright;
	push @ret, subline($x, $y, $x + $length, $y + $length) if $xright && $ytop;
	push @ret, subline($x, $y, $x,           $y + $length) if $ytop;
	push @ret, subline($x, $y, $x - $length, $y + $length) if $xleft && $ytop;
	push @ret, subline($x, $y, $x - $length, $y)           if $xleft;
	push @ret, subline($x, $y, $x - $length, $y - $length) if $xleft && $ybottom;
	push @ret, subline($x, $y, $x,           $y - $length) if $ybottom;
	push @ret, subline($x, $y, $x + $length, $y - $length) if $xright && $ybottom;
	return @ret;
}

sub othercolor {
	my ($col) = @_;
	return $col eq 'red' ? 'blue' : 'red';
}

sub select_square {
    my ($row, $col) = @_;

    $grid[$row][$col]->configure(
        -background => $player,
        -state => 'disabled',
    );

	$pgrid[$row][$col] = $player;
 
	for my $line (gridline($row, $col, 5)) {
		if ((grep { $pgrid[$_->[0]][$_->[1]] eq $player } @$line) == 5) {
			$mw->messageBox(-title => 'Winner!', -message => "\u$player wins!");
			exit;
		}
	}

	print "--\n";
	for my $line (gridline($row, $col, 4)) {
		print +(join '; ', map { "@$_" } @$line), "\n";
		if ($pgrid[$line->[1][0]][$line->[1][1]] eq othercolor($player)
		 && $pgrid[$line->[2][0]][$line->[2][1]] eq othercolor($player)
		 && $pgrid[$line->[3][0]][$line->[3][1]] eq $player) {
			$grid[$line->[1][0]][$line->[1][1]]->configure(
				-background => 'white',
				-state => 'normal',
			);
			$grid[$line->[2][0]][$line->[2][1]]->configure(
				-background => 'white',
				-state => 'normal',
			);
			$pgrid[$line->[1][0]][$line->[1][1]] = 'empty';
			$pgrid[$line->[2][0]][$line->[2][1]] = 'empty';
			$score{$player}++;
		}
	}

	if ($score{$player} >= 5) {
		$mw->messageBox(-title => 'Winner!', -message => "\u$player wins!");
	}
    
    $player = $player eq 'red' ? 'blue' : 'red';
}

MainLoop;

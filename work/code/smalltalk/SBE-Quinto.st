SimpleSwitchMorph subclass: #SBECell	instanceVariableNames: 'mouseAction state'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBECell methodsFor: 'accessing' stamp: 'lrp 5/15/2008 15:56'!mouseAction: aBlock	^ mouseAction := aBlock! !!SBECell methodsFor: 'initialization' stamp: 'lrp 5/15/2008 16:12'!initialize	super initialize.	state := false.	self label: ''.	self borderWidth: 2.	bounds := 0@0 corner: 16@16.	offColor := Color paleYellow.	onColor := Color paleBlue darker.	self useSquareCorners! !!SBECell methodsFor: 'as yet unclassified' stamp: 'lrp 5/15/2008 16:20'!mouseUp: anEvent	self toggleState.	mouseAction value! !!SBECell methodsFor: 'as yet unclassified' stamp: 'lrp 5/15/2008 16:13'!toggleState	state := state not.	self setSwitchState: state.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SBECell class	instanceVariableNames: ''!BorderedMorph subclass: #SBEGame	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBEGame methodsFor: 'initialization' stamp: 'lrp 5/15/2008 15:49'!cellsPerSide	^ 10! !!SBEGame methodsFor: 'initialization' stamp: 'lrp 5/15/2008 15:40'!initialize	| sampleCell width height n |	super initialize.	n := self cellsPerSide.	sampleCell := SBECell new.	width := sampleCell width.	height := sampleCell height.	self bounds: (5@5 extent: ((width*n)@(height*n)) + (2 * self borderWidth)).	cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].! !!SBEGame methodsFor: 'initialization' stamp: 'lrp 5/15/2008 16:04'!newCellAt: i at: j	| c origin |	c := SBECell new.	origin := self innerBounds origin.	self addMorph: c.	c position: ((i - 1) * c width) @ ((j - 1) * c height) + origin.	c mouseAction: [self toggleNeighboursOfCellAt: i at: j].	^ c! !!SBEGame methodsFor: 'game logic' stamp: 'lrp 5/15/2008 15:54'!toggleNeighboursOfCellAt: i at: j	(i > 1) ifTrue: [ (cells at: i-1 at: j) toggleState ].	(i < self cellsPerSide) ifTrue: [ (cells at: i+1 at: j) toggleState ].	(j > 1) ifTrue: [ (cells at: i at: j-1) toggleState ].	(j < self cellsPerSide) ifTrue: [ (cells at: i at: j+1) toggleState ].! !